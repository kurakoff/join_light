# Generated by Django 3.1 on 2020-09-13 00:00

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employment_type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=30, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Employment',
                'verbose_name_plural': 'Employments',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=30, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=30, verbose_name='Name')),
                ('img', models.FileField(blank=True, null=True, upload_to='img', verbose_name='Subcategory_img')),
            ],
            options={
                'verbose_name': 'Subcategory',
                'verbose_name_plural': 'Subcategories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Сategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=30, verbose_name='Name')),
                ('img', models.FileField(blank=True, null=True, upload_to='img', verbose_name='Сategory_img')),
            ],
            options={
                'verbose_name': 'Сategory',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Vacancie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('img', models.ImageField(blank=True, null=True, upload_to='img', verbose_name='Vacancy_img')),
                ('email', models.EmailField(max_length=50, verbose_name='Email')),
                ('location', models.TextField(blank=True, null=True, verbose_name='Location')),
                ('salary', models.FloatField(blank=True, null=True)),
                ('company', models.CharField(blank=True, max_length=70, null=True, verbose_name='Company')),
                ('url', models.CharField(blank=True, max_length=50, null=True, verbose_name='Url')),
                ('published', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Published')),
                ('requirements', models.TextField(blank=True, null=True, verbose_name='requirements')),
                ('tasks', models.TextField(blank=True, null=True, verbose_name='Tasks')),
                ('terms', models.TextField(blank=True, null=True, verbose_name='Terms')),
                ('telegram', models.CharField(blank=True, max_length=50, null=True, verbose_name='Telegram')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main.сategory', verbose_name='Сategory')),
                ('employment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main.employment_type', verbose_name='Employmet type')),
                ('skill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.skill', verbose_name='Skill')),
                ('subcategores', models.ManyToManyField(to='main.Subcategory', verbose_name='Subcategory')),
            ],
            options={
                'verbose_name': 'Vacancy',
                'verbose_name_plural': 'Vacancies',
                'ordering': ['-published'],
            },
        ),
        migrations.CreateModel(
            name='AdvUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_activated', models.BooleanField(db_index=True, default=True, verbose_name='Is active?')),
                ('send_messages', models.BooleanField(default=True, verbose_name='Send alerts?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
